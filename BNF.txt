program -> declaration-list
declaration-list -> declaration declaration-list'
declaration-list' -> declaration declaration-list' | empty
declaration -> var-declaration | fun-declaration
var-declaration -> type-specifier ID;
type-specifier -> Int | Void
fun-declaration -> type-specifier ID ( params )ï¼› | type-specifier ID (params) compound-stmt
params -> params-list | Void | empty
params-list -> param params-list'
params-list' -> , param params-list' | empty
param -> type-specifier ID
compound-stmt -> {local-declarations statement-list }
local-declarations -> var-declaration local-declarations | empty
statement-list -> statement statement-list | empty
statement -> expression-stmt | compound-stmt | selection-stmt | iteration-stmt | return-stmt
expression-stmt -> expression; | ;
selection-stmt -> if (expression) statement
                  | if (expression) statement else statement
iteration-stmt -> while (expression) statement
return-stmt -> return ; | return expression;
expression -> var = expression | simple-expression	
var -> ID
simple-expression -> additive-expression relop additive expression
                     | additive-expression	
relop -> <= | < | > | >= | == | !=	
additive-expression -> term additive-expression'
additive-expression' -> addop additive-expression' term | empty
addop -> + | -
term ->  factor term'
term' -> mulop term' factor | empty
mulop -> * | /
factor -> (expression) | var | call | Num
call -> ID (args)
args -> arg-list | empty
arg-list ->  expression arg-list'
arg-list' -> , expression arg-list' |  empty